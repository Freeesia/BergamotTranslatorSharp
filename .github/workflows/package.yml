name: Package

on:
  push:
    branches: [master]
    tags: [v*.*.*]
  pull_request:
    branches: ["**"]

env:
  MKL_URL: "https://data.statmt.org/romang/marian-regression-tests/ci/mkl-2020.1-windows-static.zip"
  CCACHE_BASEDIR: "${{ github.workspace }}"
  CCACHE_DIR: "${{ github.workspace }}\\ccache"
  CCACHE_COMPILERCHECK: content
  CCACHE_COMPRESS: "true"
  CCACHE_COMPRESSLEVEL: 9
  CCACHE_MAXSIZE: 200M
  ccache_version: "4.5"

jobs:
  package:
    strategy:
      matrix:
        include:
          # Windows CPU-only build
          - name: "Windows CPU-only"
            identifier: "windows-x64"

    runs-on: windows
    name: ${{ matrix.name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Download ccache
        shell: cmake -P {0}
        run: |
          set(ccache_url "https://github.com/cristianadam/ccache/releases/download/v${{ env.ccache_version }}/${{ runner.os }}.tar.xz")
          file(DOWNLOAD "${ccache_url}" ./ccache.tar.xz SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ccache.tar.xz)
          if(ret AND NOT ret EQUAL 0)
            message( FATAL_ERROR "Bad exit status")
          endif()

      - name: Generate ccache_vars for ccache based on machine
        shell: cmake -P {0}
        id: ccache_vars
        run: |-
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")
          message("::set-output name=hash::${{ env.ccache_compilercheck }}")

      - name: Cache-op for build-cache through ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ matrix.identifier }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}-${{ steps.ccache_vars.outputs.timestamp }}
          restore-keys: |-
            ccache-${{ matrix.identifier }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}
            ccache-${{ matrix.identifier }}-${{ steps.ccache_vars.outputs.hash }}
            ccache-${{ matrix.identifier }}

      - name: ccache prolog
        run: |-
          ${{github.workspace}}\ccache.exe -sv # Print current cache stats
          ${{github.workspace}}\ccache.exe -z # Print current cache stats

      - name: Download MKL
        run: |
          # Wget retries downloading files and is faster than Invoke-WebRequest
          C:\msys64\usr\bin\wget.exe -nv ${{ env.MKL_URL }} -O mkl.zip
          Expand-Archive -Force mkl.zip ${{ github.workspace }}\mkl
          # Set MKLROOT environment variable so that CMake can find MKL
          echo "MKLROOT=${{ github.workspace }}\mkl" | Out-File -FilePath $env:GITHUB_ENV  -Encoding utf8 -Append
        shell: powershell

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure
        working-directory: ${{github.workspace}}/build #@TODO figure out how variables are accessed from power shell, as they seem to not be read.
        run: |
          cmake .. -DCMAKE_BUILD_TYPE=Release -DUSE_STATIC_LIBS=ON  -DVCPKG_TARGET_TRIPLET='x64-windows-static' `
                -DCMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake"  `
                -DCMAKE_CXX_COMPILER_LAUNCHER=${{github.workspace}}\ccache.exe `
                -DCMAKE_C_COMPILER_LAUNCHER=${{github.workspace}}\ccache.exe
        shell: powershell

      - name: Build
        working-directory: ${{github.workspace}}/build
        run: |
          cmake --build . --config Release -j3 --target bergamot_translator_dynamic
          cmake --install . --prefix "../libs" --component bergamot_translator_dynamic
        shell: powershell

      - name: ccache epilog
        run: |-
          ${{github.workspace}}\\ccache.exe -sv # Print current cache stats

      - uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }} #hash of project files
          restore-keys: |
            ${{ runner.os }}-nuget-
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - uses: gittools/actions/gitversion/setup@v3.1.11
        with:
          versionSpec: "5.x"
      - id: gitversion
        uses: gittools/actions/gitversion/execute@v3.1.11
      - run: |
          dotnet pack BergamotTranslatorSharp -c Release -o pack `
            -p:Version=${{ steps.gitversion.outputs.fullSemVer }} `
            -p:AssemblyVersion=${{ steps.gitversion.outputs.assemblySemVer }} `
            -p:FileVersion=${{ steps.gitversion.outputs.assemblySemFileVer }} `
            -p:InformationalVersion=${{ steps.gitversion.outputs.informationalVersion }}
      - if: ${{ success() && startsWith(github.ref, 'refs/tags/') }}
        run: |
          dotnet nuget push pack\*.nupkg -k ${{ secrets.NUGET_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate
