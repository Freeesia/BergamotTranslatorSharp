name: Package

on:
  push:
    branches: [master]
    tags: [v*.*.*]
  pull_request:
    branches: ["**"]

jobs:
  win:
    runs-on: windows-latest
    name: Build Windows Native Lib
    env:
      MKL_URL: "https://data.statmt.org/romang/marian-regression-tests/ci/mkl-2020.1-windows-static.zip"
      CCACHE_BASEDIR: "${{ github.workspace }}"
      CCACHE_DIR: "${{ github.workspace }}\\ccache"
      CCACHE_COMPILERCHECK: content
      CCACHE_COMPRESS: "true"
      CCACHE_COMPRESSLEVEL: 9
      CCACHE_MAXSIZE: 200M
      ccache_version: "4.5"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download ccache
        shell: cmake -P {0}
        run: |
          set(ccache_url "https://github.com/cristianadam/ccache/releases/download/v${{ env.ccache_version }}/${{ runner.os }}.tar.xz")
          file(DOWNLOAD "${ccache_url}" ./ccache.tar.xz SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ccache.tar.xz)
          if(ret AND NOT ret EQUAL 0)
            message( FATAL_ERROR "Bad exit status")
          endif()

      - name: Generate ccache_vars for ccache based on machine
        shell: cmake -P {0}
        id: ccache_vars
        run: |-
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")
          message("::set-output name=hash::${{ env.ccache_compilercheck }}")

      - name: Cache-op for build-cache through ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-windows-x64-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}-${{ steps.ccache_vars.outputs.timestamp }}
          restore-keys: |-
            ccache-windows-x64-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}
            ccache-windows-x64-${{ steps.ccache_vars.outputs.hash }}
            ccache-windows-x64

      - name: ccache prolog
        run: |-
          ${{github.workspace}}\ccache.exe -sv # Print current cache stats
          ${{github.workspace}}\ccache.exe -z # Print current cache stats

      - name: Download MKL
        run: |
          # Wget retries downloading files and is faster than Invoke-WebRequest
          C:\msys64\usr\bin\wget.exe -nv ${{ env.MKL_URL }} -O mkl.zip
          Expand-Archive -Force mkl.zip ${{ github.workspace }}\mkl
          # Set MKLROOT environment variable so that CMake can find MKL
          echo "MKLROOT=${{ github.workspace }}\mkl" | Out-File -FilePath $env:GITHUB_ENV  -Encoding utf8 -Append
        shell: powershell

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure
        working-directory: ${{github.workspace}}/build #@TODO figure out how variables are accessed from power shell, as they seem to not be read.
        run: |
          cmake .. -DCMAKE_BUILD_TYPE=Release -DUSE_STATIC_LIBS=ON  -DVCPKG_TARGET_TRIPLET='x64-windows-static' `
                -DCMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake"  `
                -DCMAKE_CXX_COMPILER_LAUNCHER=${{github.workspace}}\ccache.exe `
                -DCMAKE_C_COMPILER_LAUNCHER=${{github.workspace}}\ccache.exe
        shell: powershell

      - name: Build
        working-directory: ${{github.workspace}}/build
        run: cmake --build . --config Release -j3 --target bergamot_translator_dynamic
        shell: powershell

      - name: Install
        working-directory: ${{github.workspace}}/build
        run: cmake --install . --prefix "../libs" --component bergamot_translator_dynamic
        shell: powershell

      - name: ccache epilog
        run: |-
          ${{github.workspace}}\\ccache.exe -sv # Print current cache stats
      - uses: actions/upload-artifact@v4
        with:
          name: libs-win
          path: libs/*

  linux:
    runs-on: ubuntu-latest
    name: Build Linux Native Lib
    env:
      ccache_basedir: ${{ github.workspace }}
      ccache_dir: "${{ github.workspace }}/.ccache"
      ccache_compilercheck: content
      ccache_compress: 'true'
      ccache_compresslevel: 9
      ccache_maxsize: 200M
      ccache_cmake: -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install Dependencies
        run: |-
          sudo apt-get update
          sudo apt-get install -y libprotobuf-dev protobuf-compiler libboost-all-dev ccache libunwind-dev libgoogle-perftools-dev
      - name: Install MKL
        run: |-
          wget -qO- "https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB" | sudo apt-key add -
          sudo sh -c "echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list"
          sudo apt-get update -o Dir::Etc::sourcelist="/etc/apt/sources.list.d/intel-mkl.list"
          sudo apt-get install -y --no-install-recommends intel-mkl-64bit-2020.0-088
      - name: Generate ccache_vars for ccache based on machine
        shell: bash
        id: ccache_vars
        run: |-
          echo "hash=$(echo ${{ env.ccache_compilercheck }})" >> $GITHUB_OUTPUT
          echo "timestamp=$(date '+%Y-%m-%dT%H.%M.%S')" >> $GITHUB_OUTPUT
      - name: Cache-op for build-cache through ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.ccache_dir }}
          key: ccache-linux-x64-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}-${{ steps.ccache_vars.outputs.timestamp }}
          restore-keys: |-
            ccache-linux-x64-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}
            ccache-linux-x64-${{ steps.ccache_vars.outputs.hash }}
            ccache-linux-x64
      - name: ccache environment setup
        run: |-
          echo "CCACHE_COMPILER_CHECK=${{ env.ccache_compilercheck }}" >> $GITHUB_ENV
          echo "CCACHE_BASEDIR=${{ env.ccache_basedir }}" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=${{ env.ccache_compress }}" >> $GITHUB_ENV
          echo "CCACHE_COMPRESSLEVEL=${{ env.ccache_compresslevel }}" >> $GITHUB_ENV
          echo "CCACHE_DIR=${{ env.ccache_dir }}" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=${{ env.ccache_maxsize }}" >> $GITHUB_ENV
      - name: ccache prolog
        run: |-
          ccache -s # Print current cache stats
          ccache -z # Zero cache entry
      - name: cmake
        run: |-
          mkdir -p build
          cd build
          cmake -L .. ${{ env.ccache_cmake }} -DCMAKE_BUILD_TYPE=Release -DUSE_STATIC_LIBS=ON
      - name: Build from source
        working-directory: build
        run: cmake --build . --config Release -j3 --target bergamot_translator_dynamic
      - name: Install
        working-directory: build
        run: cmake --install . --prefix "../libs" --component bergamot_translator_dynamic
      - name: ccache epilog
        run: 'ccache -s # Print current cache stats'
      - uses: actions/upload-artifact@v4
        with:
          name: libs-linux
          path: libs/*
  dotnet:
    runs-on: ubuntu-latest
    name: Build .NET Lib
    needs:
      - win
      - linux
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - uses: gittools/actions/gitversion/setup@v3.1.11
        with:
          versionSpec: "5.x"
      - id: gitversion
        uses: gittools/actions/gitversion/execute@v3.1.11
      - uses: actions/download-artifact@v4
        with:
          path: libs
          merge-multiple: true
      - run: |
          dotnet pack BergamotTranslatorSharp -c Release -o pack \
            -p:Version=${{ steps.gitversion.outputs.fullSemVer }} \
            -p:AssemblyVersion=${{ steps.gitversion.outputs.assemblySemVer }} \
            -p:FileVersion=${{ steps.gitversion.outputs.assemblySemFileVer }} \
            -p:InformationalVersion=${{ steps.gitversion.outputs.informationalVersion }}
      - uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: pack/*
      - if: ${{ success() && startsWith(github.ref, 'refs/tags/') }}
        run: dotnet nuget push pack/*.nupkg -k ${{ secrets.NUGET_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate
      - if: ${{ success() && startsWith(github.ref, 'refs/tags/') }}
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          draft: false
          prerelease: false
